// Copyright 2014-2015 The Dename Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

syntax = "proto3";
package proto;
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "client.proto";
import "timestamp.proto";

// KeyserverStep denotes the input to a single step of the keyserver state
// machine. Serializable high-availability replication is achieved by
// replicating an in-order log of all steps and having each replica reproduce
// the state from them.
message KeyserverStep {
	fixed64 UID = 1; // optional, for matching replies to clients. TODO: fixed64?
	// TODO: should all fields in a oneof have their own types for extensibility?
	oneof type {
		// Update is appended to the log when it is received from a client and
		// has passed pre-validation. However, since pre-validation is not
		// final, "success" should not be returned to the client until after the
		// update has been applied and ratified.
		// update is applied to the keyserver state as soon as it has been
		// committed to the log.
		UpdateRequest update = 2;
		// EpochDelimiter is appended to the log by a leader (not necessarily
		// unique) node when at least the duration EPOCH_INTERVAL_MIN and at
		// most EPOCH_INTERVAL_MAX after the previous epoch_delimiter has passed.
		// Between these times, an epoch delimiter is appended as soon as an
		// update is committed.
		// As the leader requirement for appending an epoch_delimiter is soft,
		// it may happen that an epoch delimiter with a epoch number not higher
		// than the previous gets committed to the log. It must be ignored.
		EpochDelimiter epoch_delimiter = 3;
		// ReplicaSigned for the last epoch is appended to the log
		// when the epoch_delimiter is committed.
		// After some majority of the replicas has signed the next
		// TimestampedEpochHead; their signatures make up the keyserver
		// signature. As combining signatures is deterministic, no new log
		// entry is appended to record that.
		SignedEpochHead replica_signed = 4;
		// VerifierSigned is appended for each new SignedEpochHead received
		// from a verifier; these are used to provide proof of verification to
		// clients.
		SignedEpochHead verifier_signed = 5;
		// Do nothing but running epoch
		EpochUpdate update_epoch = 6;
	}
}

message EpochDelimiter {
	uint64 epoch_number = 1; // epoch numbering starts at 1
	Timestamp timestamp = 2 [(gogoproto.nullable) = false];
}

message EpochUpdate {
	EpochDelimiter delimiter = 1; // the proposed EpochDelimiter
	bool update = 2;	// a flag to update the epoch immediately
}
