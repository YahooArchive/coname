// Copyright 2014-2015 The Dename Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

syntax = "proto3";
package proto;
import "gogoproto/gogo.proto";
import "tlsconfig.proto";
import "duration.proto";
import "client.proto";

// ReplicaConfig contains the local configuration of a single replica of a
// keyserver. It is valid to have just one replica, but a larger odd number is
// desireable for availability.
message ReplicaConfig {
	KeyserverConfig keyserver_config = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

	// ReplicaID is a globally unique identifier. See Replica.ID.
	uint64 replica_id = 2 [(gogoproto.customname) = "ReplicaID"];
	// SigningKeyID specifies the signing key by reference. The mechanism of
	// loading keys depends on the deployment scenario; by default, the key
	// identifier is a path to a file containing the key.
	string signing_key_id = 3 [(gogoproto.customname) = "SigningKeyID"];

	// The following fields describe how this particular replica should accept
	// requests from the network.

	string update_addr = 4;
	TLSConfig update_tls = 5 [(gogoproto.customname) = "UpdateTLS"];
	string lookup_addr = 6;
	TLSConfig lookup_tls = 7 [(gogoproto.customname) = "LookupTLS"];
	string verifier_addr = 8;
	TLSConfig verifier_tls = 9 [(gogoproto.customname) = "VerifierTLS"];
	string hkp_addr = 10 [(gogoproto.customname) = "HKPAddr"];
	TLSConfig hkp_tls = 11 [(gogoproto.customname) = "HKPTLS"];
	string raft_addr = 12;
	TLSConfig raft_tls = 13 [(gogoproto.customname) = "RaftTLS"];

	// LevelDBPath specifies the directory in which the databse is stored.
	// Nothing else should use this directory.
	string leveldb_path = 14 [(gogoproto.customname) = "LevelDBPath"];

	// RaftHeartbeat specifies the interval between successive heartbeat
	// messages sent by the replicated state machine controller. Lowering the
	// heartbeat interval generates more network traffic; increasing the
	// interval increases the time it takes to detect a failed replica and
	// perform an automated failover.
	Duration raft_heartbeat = 15;

	// LaggingVerifierScan specifies the maximum number of epochs by which a
	// verifier can be lagging us for us to still serve its signature to
	// clients. Finding the verifier signatures is currentl implemented using a
	// linear scan backwards from the current epoch, so setting a very high
	// value can open up cause significant amounts of database reads on the
	// server. A fancy index-based scan would be possible, but there is no
	// clear need for it -- the epochs far in the past will probably have
	// expired anyway. The zero value means no limit, but it should be used for
	// testing only. The recommended value is 1000.
	uint64 lagging_verifier_scan = 16;

	// ClientTimeout specifies the maximum amount of time the server is willing
	// to allow from the start of a client request to until it is handled. The
	// zero value means no limit.
	Duration client_timout = 17;
}

// KeyserverConfig describes the keyserver-wide configuration. All replicas
// MUST use the same KeyserverConfig.
message KeyserverConfig {
	// ServerID is deprecated and should not be used. TODO: remove.  Signatures
	// should be tagged with ReplicaIDs, and the realm can be used to refer to
	// the keyserver as a whole.
	uint64 server_id = 1 [(gogoproto.customname) = "ServerID"];
	// Realm specifies the general set of users whose keys this keyserver
	// manages. If the user identifiers are email addresses, the realm should
	// match the domain name in the email address.
	string realm = 2;
	// SigningKeyID specifies the key for the verifiable random function by
	// reference. The mechanism of loading keys depends on the deployment
	// scenario; by default, the key identifier is a path to a file containing
	// the key.
	string vrf_key_id = 3 [(gogoproto.customname) = "VRFKeyID"];

	// MinEpochInterval specifies the time for which the keyserver stops
	// proposing new epochs once an epoch has been committed. The zero value
	// means no delay. After MinEpochInterval since the last epoch, the
	// keyserver will propose a new epoch as soon as an update has been
	// committed.
	Duration min_epoch_interval = 4 [(gogoproto.nullable) = false];
	// MaxEpochInterval specifies the time after which the keyserver will
	// propose a new epoch even if there have been no updates since the last
	// epoch. Vouching for the lack of updates is important to ensure the users
	// that none of the served keys have been revoked. This value is a trigger,
	// NOT a deadline; there is no guarantee that consecutive epochs will be at
	// most MaxEpochInterval apart. The actual time between by epochs is
	// MaxEpochInterval plus however long it takes to commit and sign a new
	// epoch.
	Duration max_epoch_interval = 5 [(gogoproto.nullable) = false];
	// ProposalRetryInterval specifies the time after an unsuccessful proposal
	// after which the proposal will be retried. A lower value will generate
	// more redundant network traffic while a higher value will improve
	// responsiveness in presence of network or node failures (bounded below by
	// the raft failover time).
	Duration proposal_retry_interval = 6 [(gogoproto.nullable) = false];

	// InitialReplicas contains the cluster configuration at the beginning of
	// time. It MUST NOT be modified ever after, and it MUST be the same for
	// all replicas. Use AddReplica and RemoveReplica to change the current
	// cluster configuration.
	repeated Replica initial_replicas = 7;

	// EmailProofToAddr specifies the additional allowed to address in email
	// proofs. By default, only proofs sent to the user being registered all
	// accepted. This option can be used to allow proofs emailed directly to
	// the keyserver to be accepted (but the keyserver does NOT implement a
	// SMTP interface right now).
	string email_proof_to_addr = 8;
	// EmailProofSubjectPrefix is used for DKIM-based email address
	// registration.  The proof challenge is sent in the subject line, with an
	// optional string preceding it. For example, if EmailProofSubjectPrefix =
	// "account verification: ", then the proof email needs to have a subject
	// line "account verification: abcd" for verify challenge abcd.
	string email_proof_subject_prefix = 9;

	// EmailProofAllowedDomains specifies the domains for which this keyserver
	// accepts email address registrations.
	repeated string email_proof_allowed_domains = 10;
}

message Replica {
	// Id is used to distinguish between nodes during consistent replication.
	// All node ID-s MUST be unique, MUST NOT be reused (e.g., using IP-s or
	// hostnames is probably a bad idea) and SHOULD be set to the ID of the
	// first public key by convention.
	uint64 id = 1 [(gogoproto.customname) = "ID"];
	// PublicKeys lists the public keys of a node, to be joined using a
	// 1-out-of-n policy. The order of this list is NOT preserved.
	repeated PublicKey public_keys = 2;
	// RaftAddr is the Raft network address of the node, such that
	// net.Dial("tcp", Addr) reaches the node. Supported formats include
	// host.domain:port and ip:port.
	string raft_addr = 3;
}
