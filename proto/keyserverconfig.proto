// Copyright 2014-2015 The Dename Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

syntax = "proto3";
package proto;
import "gogoproto/gogo.proto";
import "tlsconfig.proto";
import "duration.proto";
import "client.proto";

// ReplicaConfig contains the local configuration of a single replica of a
// keyserver. It is valid to have just one replica, but a larger odd number is
// desirable for availability.
message ReplicaConfig {
	KeyserverConfig keyserver_config = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

	// ReplicaID is a globally unique identifier. See Replica.ID.
	uint64 replica_id = 2 [(gogoproto.customname) = "ReplicaID"];
	// SigningKeyID specifies the signing key by reference. The mechanism of
	// loading keys depends on the deployment scenario; by default, the key
	// identifier is a path to a file containing the key.
	string signing_key_id = 3 [(gogoproto.customname) = "SigningKeyID"];

	// The following fields describe how this particular replica should accept
	// requests from the network.

	string public_addr = 4;
	TLSConfig public_tls = 5 [(gogoproto.customname) = "PublicTLS", (gogoproto.nullable) = false];
	string verifier_addr = 6;
	TLSConfig verifier_tls = 7 [(gogoproto.customname) = "VerifierTLS", (gogoproto.nullable) = false];
	string hkp_addr = 8 [(gogoproto.customname) = "HKPAddr"];
	TLSConfig hkp_tls = 9 [(gogoproto.customname) = "HKPTLS", (gogoproto.nullable) = false];
	string httpfront_addr = 10 [(gogoproto.customname) = "HTTPFrontAddr"];
	TLSConfig httpfront_tls = 11 [(gogoproto.customname) = "HTTPFrontTLS", (gogoproto.nullable) = false];
	string raft_addr = 12;
	TLSConfig raft_tls = 13 [(gogoproto.customname) = "RaftTLS", (gogoproto.nullable) = false];

	// LevelDBPath specifies the directory in which the database is stored.
	// Nothing else should use this directory.
	string leveldb_path = 14 [(gogoproto.customname) = "LevelDBPath"];

	// RaftHeartbeat specifies the interval between successive heartbeat
	// messages sent by the replicated state machine controller. Lowering the
	// heartbeat interval generates more network traffic; increasing the
	// interval increases the time it takes to detect a failed replica and
	// perform an automated failover.
	Duration raft_heartbeat = 15 [(gogoproto.nullable) = false];

	// LaggingVerifierScan specifies the maximum number of epochs by which a
	// verifier can be lagging us for us to still serve its signature to
	// clients. Finding the verifier signatures is currently implemented using a
	// linear scan backwards from the current epoch, so setting a very high
	// value can open up cause significant amounts of database reads on the
	// server. A fancy index-based scan would be possible, but there is no
	// clear need for it -- the epochs far in the past will probably have
	// expired anyway. The zero value means no limit, but it should be used for
	// testing only. The recommended value is 1000.
	uint64 lagging_verifier_scan = 16;

	// ClientTimeout specifies the maximum amount of time the server is willing
	// to allow from the start of a client request to until it is handled. The
	// zero value means no limit.
	Duration client_timeout = 17 [(gogoproto.nullable) = false];
}

// KeyserverConfig describes the keyserver-wide configuration. All replicas
// MUST use the same KeyserverConfig.
message KeyserverConfig {
	// ServerID is deprecated and should not be used. TODO: remove.  Signatures
	// should be tagged with ReplicaIDs, and the realm can be used to refer to
	// the keyserver as a whole.
	uint64 server_id = 1 [(gogoproto.customname) = "ServerID"];
	// Realm specifies the general set of users whose keys this keyserver
	// manages. If the user identifiers are email addresses, the realm should
	// match the domain name in the email address.
	string realm = 2;
	// SigningKeyID specifies the key for the verifiable random function by
	// reference. The mechanism of loading keys depends on the deployment
	// scenario; by default, the key identifier is a path to a file containing
	// the key.
	string vrf_key_id = 3 [(gogoproto.customname) = "VRFKeyID"];

	// MinEpochInterval specifies the time for which the keyserver stops
	// proposing new epochs once an epoch has been committed. The zero value
	// means no delay. After MinEpochInterval since the last epoch, the
	// keyserver will propose a new epoch as soon as an update has been
	// committed.
	Duration min_epoch_interval = 4 [(gogoproto.nullable) = false];
	// MaxEpochInterval specifies the time after which the keyserver will
	// propose a new epoch even if there have been no updates since the last
	// epoch. Vouching for the lack of updates is important to ensure the users
	// that none of the served keys have been revoked. This value is a trigger,
	// NOT a deadline; there is no guarantee that consecutive epochs will be at
	// most MaxEpochInterval apart. The actual time between by epochs is
	// MaxEpochInterval plus however long it takes to commit and sign a new
	// epoch.
	Duration max_epoch_interval = 5 [(gogoproto.nullable) = false];
	// ProposalRetryInterval specifies the time after an unsuccessful proposal
	// after which the proposal will be retried. A lower value will generate
	// more redundant network traffic while a higher value will improve
	// responsiveness in presence of network or node failures (bounded below by
	// the raft failover time).
	Duration proposal_retry_interval = 6 [(gogoproto.nullable) = false];

	// InitialReplicas contains the cluster configuration at the beginning of
	// time. It MUST NOT be modified ever after, and it MUST be the same for
	// all replicas. Use AddReplica and RemoveReplica to change the current
	// cluster configuration.
	repeated Replica initial_replicas = 7;

	// Keyserver may support multiple registration policies at a time.
	// A policy is acceptable only for the domains it supports.
	repeated RegistrationPolicy registration_policy = 8;
}

// RegistrationPolicy specifies the list of policies the keyserver may support,
// to confirm the ownership of an email address
message RegistrationPolicy {
	oneof policy_type {
		bool insecure_skip_email_proof = 1;
		EmailProofByDKIM email_proof_by_dkim = 2	[(gogoproto.customname) = "EmailProofByDKIM"];
		EmailProofByClientCert email_proof_by_client_cert = 3;
		EmailProofByOIDC email_proof_by_oidc = 4	[(gogoproto.customname) = "EmailProofByOIDC"];
		EmailProofBySAML email_proof_by_saml = 5	[(gogoproto.customname) = "EmailProofBySAML"];
	}
}

message EmailProofByDKIM {
	// AllowedDomains specifies the domains for which this keyserver accepts
	// email address registrations.
	repeated string allowed_domains = 1;
	// ToAddr specifies the additional allowed to address in email proofs. By
	// default, only proofs sent to the user being registered all accepted.
	// This option can be used to allow proofs emailed directly to the
	// keyserver to be accepted (but the keyserver does NOT implement a SMTP
	// interface right now).
	string to_addr = 2;
	// SubjectPrefix is used for DKIM-based email address registration.  The
	// proof challenge is sent in the subject line, with an optional string
	// preceding it. For example, if EmailProofSubjectPrefix = "account
	// verification: ", then the proof email needs to have a subject line
	// "account verification: abcd" for verify challenge abcd.
	string subject_prefix = 3;
}

// EmailProofByClientCert accepts a certificate signed by an authority trusted
// with handling registration as sufficient confirmation of ownership of an
// email address. The emailAddress value in the certificate's DistinguishedName
// field is allowed to be registered by the holder of the key specified in the
// certificate.
message EmailProofByClientCert {
	// AllowedDomains specifies the domains for which this keyserver accepts
	// email address registrations by this policy.
	repeated string allowed_domains = 1;
	// CaCert contains the trusted certificate authority certificate in DER format.
	bytes ca_cert = 2;
}

// EmailProofByOIDC accepts an ID token fetched from an OpenID Connect provider
// and validates it as specified in the configuration. The token must have a 
// valid signature, not expired, signed by the expected provider and must contain
// the expected Client ID
message EmailProofByOIDC {
	repeated OIDCConfig oidc_config = 1 [(gogoproto.customname) = "OIDCConfig"];
}

// EmailProofBySAML accepts the SAMLResponse signed by SAML2.0 Identity Provider
// as a sufficient confirmation of ownership of an email address. The email address
// must match the value of EmailAddress attribute in a valid SAMLResponse
message EmailProofBySAML {
	// AllowedDomains specifies the domains for which this keyserver accepts
	// email address registrations by this policy.
	repeated string allowed_domains = 1;
	// IdPMetadataURL specifies the location of Identity Provider metadata
	// Identity provider's x509 cert is included in this metadata
	string idp_metadata_url = 2	[(gogoproto.customname) = "IdPMetadataURL"];
	// IdPCert contains the certificate of the Identity Provider in DER format.
	bytes idp_cert = 3	[(gogoproto.customname) = "IdPCert"];
	// ConsumerServiceURL contains the AssertionConsumerServiceURL
	string consumer_service_url = 4	[(gogoproto.customname) = "ConsumerServiceURL"];
}

// OIDCConfig contains the OpenID Connect client configuration which is used to
// validate the token received from the keyserver client.
message OIDCConfig {
	// AllowedDomains specifies the domains for which this keyserver accepts
	// email address registrations by this policy.
	repeated string allowed_domains = 1;
	// DiscoveryURL specifies the location of OpenID Connect discovery document
	// as specified at http://openid.net/specs/openid-connect-discovery-1_0.html
	string discovery_url = 2	[(gogoproto.customname) = "DiscoveryURL"];
	// Issuer specifies OpenID Connect issuer discovery url
	string issuer = 3;
	// clientID specifies client's ID when the app is registered
	string clientID = 4	[(gogoproto.customname) = "ClientID"];
	// Validity specifies the maximum amount of time the server is willing
	// to accept an OpenID Connect token from the issue time in the token itself.
	// A zero value means server will only rely on the expiry field in the token.
	Duration validity = 5	[(gogoproto.nullable) = false];
}

message Replica {
	// Id is used to distinguish between nodes during consistent replication.
	// All node ID-s MUST be unique, MUST NOT be reused (e.g., using IP-s or
	// hostnames is probably a bad idea) and SHOULD be set to the ID of the
	// first public key by convention.
	uint64 id = 1 [(gogoproto.customname) = "ID"];
	// PublicKeys lists the public keys of a node, to be joined using a
	// 1-out-of-n policy. The order of this list is NOT preserved.
	repeated PublicKey public_keys = 2;
	// RaftAddr is the Raft network address of the node, such that
	// net.Dial("tcp", Addr) reaches the node. Supported formats include
	// host.domain:port and ip:port.
	string raft_addr = 3;
}
